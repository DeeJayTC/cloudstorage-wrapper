<?xml version="1.0"?>
<doc>
    <assembly>
        <name>TCDev.Cloudstorage</name>
    </assembly>
    <members>
        <member name="T:TCDev.CloudStorage.Controllers.AccountController">
            <summary>
               Account Controller for CSP requests
            </summary>
        </member>
        <member name="M:TCDev.CloudStorage.Controllers.AccountController.Get(System.String)">
            <summary>
               Returns full info for the cloud storage provider accessible by the access_token
            </summary>
            <response code="200">OK</response>
            <response code="401">If the given token is invalid, authentication failed</response>
            <response code="501">If the integration is disabled for the provider</response>
            <response code="503">If there is no implementation for the requested provider</response>
        </member>
        <member name="T:TCDev.CloudStorage.Controllers.DrivesController">
            <summary>
               Account Controller for CSP requests
            </summary>
        </member>
        <member name="M:TCDev.CloudStorage.Controllers.DrivesController.Get(System.String)">
            <summary>
               Returns available drives for the specified site
            </summary>
            <returns>
               <see cref="T:TCDev.CloudStorage.Model.ICloudStorageProviderDriveInfo" />
            </returns>
            <response code="200" cref="T:TCDev.CloudStorage.Model.ICloudStorageProviderDriveInfo">OK</response>
            <response code="401">If the given token is invalid, authentication failed</response>
            <response code="404">If nothing could be found for the siteId</response>
            <response code="501">If the integration is disabled for the provider</response>
            <response code="503">If there is no implementation for the requested provider</response>
        </member>
        <member name="M:TCDev.CloudStorage.Controllers.DrivesController.GetDriveInfo(System.String,System.String)">
            <summary>
               Returns drive info for the specified drive ID
            </summary>
            <returns>
               <see cref="T:TCDev.CloudStorage.Model.ICloudStorageProviderDriveInfo" />
            </returns>
            <response code="200" cref="T:TCDev.CloudStorage.Model.ICloudStorageProviderDriveInfo">OK</response>
            <response code="401">If the given token is invalid, authentication failed</response>
            <response code="404">If nothing could be found for the driveId</response>
            <response code="501">If the integration is disabled for the provider</response>
            <response code="503">If there is no implementation for the requested provider</response>
        </member>
        <member name="T:TCDev.CloudStorage.Controllers.FilesController">
            <summary>
               Account Controller for CSP requests
            </summary>
        </member>
        <member name="M:TCDev.CloudStorage.Controllers.FilesController.GetFileDetails(System.String)">
            <summary>
               Returns full details for the file
            </summary>
            <returns>
               <see cref="T:TCDev.CloudStorage.Model.ICloudStorageProviderItem" />
            </returns>
            <response code="200" cref="T:TCDev.CloudStorage.Model.ICloudStorageProviderItem">OK</response>
            <response code="401">If the given token is invalid, authentication failed</response>
            <response code="404">If nothing could be found for the fileId or driveId</response>
            <response code="501">If the integration is disabled for the provider</response>
            <response code="503">If there is no implementation for the requested provider</response>
        </member>
        <member name="M:TCDev.CloudStorage.Controllers.FilesController.UploadFile(Microsoft.AspNetCore.Http.IFormFile,System.String)">
            <summary>
               Uploads one or multiple files
            </summary>
            <returns>
               <see cref="T:TCDev.CloudStorage.Model.ICloudStorageProviderItem" />
            </returns>
            <response code="200" cref="T:TCDev.CloudStorage.Model.ICloudStorageProviderItem">OK</response>
            <response code="401">If the given token is invalid, authentication failed</response>
            <response code="404">If nothing could be found for the folderId or driveId</response>
            <response code="501">If the integration is disabled for the provider</response>
            <response code="503">If there is no implementation for the requested provider</response>
        </member>
        <member name="M:TCDev.CloudStorage.Controllers.FilesController.UpdateFile(System.String,Microsoft.AspNetCore.Http.IFormFile)">
            <summary>
               Uploads a new revision of the file (form encoded data)
            </summary>
            <returns>
               <see cref="T:TCDev.CloudStorage.Model.ICloudStorageProviderItem" />
            </returns>
            <response code="200" cref="T:TCDev.CloudStorage.Model.ICloudStorageProviderItem">OK</response>
            <response code="401">If the given token is invalid, authentication failed</response>
            <response code="404">If nothing could be found for the fileId or driveId</response>
            <response code="501">If the integration is disabled for the provider</response>
            <response code="503">If there is no implementation for the requested provider</response>
        </member>
        <member name="M:TCDev.CloudStorage.Controllers.FilesController.UpdateFileContent(System.String,Microsoft.AspNetCore.Http.IFormFile)">
            <summary>
               Uploads the contents of a file (form encoded data)
            </summary>
            <returns>
               <see cref="T:TCDev.CloudStorage.Model.ICloudStorageProviderItem" />
            </returns>
            <response code="200" cref="T:TCDev.CloudStorage.Model.ICloudStorageProviderItem">OK</response>
            <response code="401">If the given token is invalid, authentication failed</response>
            <response code="404">If nothing could be found for the fileId or driveId</response>
            <response code="501">If the integration is disabled for the provider</response>
            <response code="503">If there is no implementation for the requested provider</response>
        </member>
        <member name="M:TCDev.CloudStorage.Controllers.FilesController.GetFileThumbnails(System.String,System.String)">
            <summary>
               Returns thumbnail images for the file
            </summary>
            <returns>
               <see cref="T:TCDev.CloudStorage.Model.ICloudStorageProviderItem" />
            </returns>
            <response code="200" cref="T:TCDev.CloudStorage.Model.ICloudStorageProviderItem">OK</response>
            <response code="401">If the given token is invalid, authentication failed</response>
            <response code="404">If nothing could be found for the fileId or driveId</response>
            <response code="501">If the integration is disabled for the provider</response>
            <response code="503">If there is no implementation for the requested provider</response>
        </member>
        <member name="M:TCDev.CloudStorage.Controllers.FilesController.GetFileDownloadLinks(System.String)">
            <summary>
               Returns download links for the file
            </summary>
            <returns>
               <see cref="T:TCDev.CloudStorage.Model.ICloudStorageProviderItem" />
            </returns>
            <response code="200" cref="T:TCDev.CloudStorage.Model.ICloudStorageProviderItem">OK</response>
            <response code="401">If the given token is invalid, authentication failed</response>
            <response code="404">If nothing could be found for the fileId or driveId</response>
            <response code="501">If the integration is disabled for the provider</response>
            <response code="503">If there is no implementation for the requested provider</response>
        </member>
        <member name="M:TCDev.CloudStorage.Controllers.FilesController.DeleteFile(System.String)">
            <summary>
               Deletes the file
            </summary>
            <returns>
               <see cref="T:TCDev.CloudStorage.Model.ICloudStorageProviderItem" />
            </returns>
            <response code="200" cref="T:TCDev.CloudStorage.Model.ICloudStorageProviderItem">OK</response>
            <response code="401">If the given token is invalid, authentication failed</response>
            <response code="404">If nothing could be found for the fileId or driveId</response>
            <response code="501">If the integration is disabled for the provider</response>
            <response code="503">If there is no implementation for the requested provider</response>
        </member>
        <member name="M:TCDev.CloudStorage.Controllers.FilesController.GetFolderSearch(System.Boolean,System.String,System.Boolean)">
            <summary>
               Searches all contents of the drive
            </summary>
            <returns>
               <see cref="T:TCDev.CloudStorage.Model.ICloudStorageProviderFolderInfo" />
            </returns>
            <response code="200" cref="T:TCDev.CloudStorage.Model.ICloudStorageProviderFolderInfo">OK</response>
            <response code="401">If the given token is invalid, authentication failed</response>
            <response code="404">If nothing could be found for the folderId</response>
            <response code="501">If the integration is disabled for the provider</response>
            <response code="503">If there is no implementation for the requested provider</response>
        </member>
        <member name="M:TCDev.CloudStorage.Controllers.FilesController.CopyFile(System.String,System.String)">
            <summary>
               Creates a copy of the file and returns the newly created file details
            </summary>
            <returns>
               <see cref="T:TCDev.CloudStorage.Model.ICloudStorageProviderItem" />
            </returns>
            <response code="200" cref="T:TCDev.CloudStorage.Model.ICloudStorageProviderItem">OK</response>
            <response code="401">If the given token is invalid, authentication failed</response>
            <response code="404">If nothing could be found for the fileId or driveId</response>
            <response code="501">If the integration is disabled for the provider</response>
            <response code="503">If there is no implementation for the requested provider</response>
        </member>
        <member name="M:TCDev.CloudStorage.Controllers.FilesController.CreateLink(System.String,System.String,System.String)">
            <summary>
               Creates a copy of the file and returns the newly created file details
            </summary>
            <returns>
               <see cref="T:System.String" />
            </returns>
            <response code="200" cref="T:System.String">OK</response>
            <response code="401">If the given token is invalid, authentication failed</response>
            <response code="404">If nothing could be found for the fileId or driveId</response>
            <response code="501">If the integration is disabled for the provider</response>
            <response code="503">If there is no implementation for the requested provider</response>
        </member>
        <member name="T:TCDev.CloudStorage.Controllers.FoldersController">
            <summary>
               Account Controller for CSP requests
            </summary>
        </member>
        <member name="M:TCDev.CloudStorage.Controllers.FoldersController.GetFolderContents(System.String,System.Boolean,System.Boolean,System.Boolean,System.String)">
            <summary>
               Returns a list of the folder contents
            </summary>
            <returns>
               <see cref="T:TCDev.CloudStorage.Model.ICloudStorageProviderItem" />
            </returns>
            <response code="200" cref="T:TCDev.CloudStorage.Model.ICloudStorageProviderItem">OK</response>
            <response code="401">If the given token is invalid, authentication failed</response>
            <response code="404">If nothing could be found for the folderId</response>
            <response code="501">If the integration is disabled for the provider</response>
            <response code="503">If there is no implementation for the requested provider</response>
        </member>
        <member name="M:TCDev.CloudStorage.Controllers.FoldersController.GetFolderContentsByPath(System.String,System.Boolean,System.Boolean,System.Boolean,System.String)">
            <summary>
               Returns a list of the folder contents
            </summary>
            <returns>
               <see cref="T:TCDev.CloudStorage.Model.ICloudStorageProviderItem" />
            </returns>
            <response code="200" cref="T:TCDev.CloudStorage.Model.ICloudStorageProviderItem">OK</response>
            <response code="401">If the given token is invalid, authentication failed</response>
            <response code="404">If nothing could be found for the folderId</response>
            <response code="501">If the integration is disabled for the provider</response>
            <response code="503">If there is no implementation for the requested provider</response>
        </member>
        <member name="M:TCDev.CloudStorage.Controllers.FoldersController.GetFolderDetails(System.String,System.String)">
            <summary>
               Returns full details for the folder
            </summary>
            <returns>
               <see cref="T:TCDev.CloudStorage.Model.ICloudStorageProviderFolderInfo" />
            </returns>
            <response code="200" cref="T:TCDev.CloudStorage.Model.ICloudStorageProviderFolderInfo">OK</response>
            <response code="401">If the given token is invalid, authentication failed</response>
            <response code="404">If nothing could be found for the folderId</response>
            <response code="501">If the integration is disabled for the provider</response>
            <response code="503">If there is no implementation for the requested provider</response>
        </member>
        <member name="M:TCDev.CloudStorage.Controllers.FoldersController.GetFolderSearch(System.String,System.Boolean,System.String,System.Boolean,System.String)">
            <summary>
               Searches the given folder and its subfolders
            </summary>
            <returns>
               <see cref="T:TCDev.CloudStorage.Model.ICloudStorageProviderFolderInfo" />
            </returns>
            <response code="200" cref="T:TCDev.CloudStorage.Model.ICloudStorageProviderFolderInfo">OK</response>
            <response code="401">If the given token is invalid, authentication failed</response>
            <response code="404">If nothing could be found for the folderId</response>
            <response code="501">If the integration is disabled for the provider</response>
            <response code="503">If there is no implementation for the requested provider</response>
        </member>
        <member name="M:TCDev.CloudStorage.Controllers.FoldersController.CreateFolder(System.String,System.String,System.String)">
            <summary>
               Creates a new folder
            </summary>
            <returns>
               <see cref="T:TCDev.CloudStorage.Model.ICloudStorageProviderItem" />
            </returns>
            <response code="200" cref="T:TCDev.CloudStorage.Model.ICloudStorageProviderItem">OK</response>
            <response code="401">If the given token is invalid, authentication failed</response>
            <response code="404">If nothing could be found for the folderId</response>
            <response code="501">If the integration is disabled for the provider</response>
            <response code="503">If there is no implementation for the requested provider</response>
        </member>
        <member name="M:TCDev.CloudStorage.Controllers.FoldersController.DeleteFolder(System.String,System.String)">
            <summary>
               Deletes the folder
            </summary>
            <returns>
               <see cref="T:TCDev.CloudStorage.Model.ICloudStorageProviderItem" />
            </returns>
            <response code="200" cref="T:TCDev.CloudStorage.Model.ICloudStorageProviderItem">OK</response>
            <response code="401">If the given token is invalid, authentication failed</response>
            <response code="404">If nothing could be found for the folderId</response>
            <response code="501">If the integration is disabled for the provider</response>
            <response code="503">If there is no implementation for the requested provider</response>
        </member>
        <member name="M:TCDev.CloudStorage.Controllers.FoldersController.UploadFile(System.String,Microsoft.AspNetCore.Http.IFormFile,System.String)">
            <summary>
               Uploads one or multiple files to the folder
            </summary>
            <returns>
               <see cref="T:TCDev.CloudStorage.Model.ICloudStorageProviderItem" />
            </returns>
            <response code="200" cref="T:TCDev.CloudStorage.Model.ICloudStorageProviderItem">OK</response>
            <response code="401">If the given token is invalid, authentication failed</response>
            <response code="404">If nothing could be found for the folderId</response>
            <response code="501">If the integration is disabled for the provider</response>
            <response code="503">If there is no implementation for the requested provider</response>
        </member>
        <member name="T:TCDev.CloudStorage.Controllers.SitesController">
            <summary>
               Sites Controller
            </summary>
        </member>
        <member name="M:TCDev.CloudStorage.Controllers.SitesController.Get(System.String)">
            <summary>
               Returns a list of sites (Sharepoint only)
            </summary>
            <returns>
               <see cref="T:TCDev.CloudStorage.Model.ICloudStorageProviderSiteInfo" />
            </returns>
            <response code="200" cref="T:TCDev.CloudStorage.Model.ICloudStorageProviderSiteInfo">OK</response>
            <response code="401">If the given token is invalid, authentication failed</response>
            <response code="503">If there is no implementation for the requested provider</response>
        </member>
        <member name="M:TCDev.CloudStorage.Controllers.SitesController.GetSiteDetails(System.String,System.String)">
            <summary>
               Returns full details for the site  (Sharepoint only)
            </summary>
            <returns>
               <see cref="T:TCDev.CloudStorage.Model.ICloudStorageProviderSiteInfo" />
            </returns>
            <response code="200" cref="T:TCDev.CloudStorage.Model.ICloudStorageProviderSiteInfo">OK</response>
            <response code="401">If the given token is invalid, authentication failed</response>
            <response code="404">If nothing could be found for the siteId</response>
            <response code="501">If the integration is disabled for the provider</response>
            <response code="503">If there is no implementation for the requested provider</response>
        </member>
        <member name="M:TCDev.CloudStorage.Controllers.SitesController.GetSitesSearch(System.String,System.String)">
            <summary>
               Searches the available sites (Sharepoint only)
            </summary>
            <returns>
               <see cref="T:TCDev.CloudStorage.Model.ICloudStorageProviderSiteInfo" />
            </returns>
            <response code="200" cref="T:TCDev.CloudStorage.Model.ICloudStorageProviderSiteInfo">OK</response>
            <response code="401">If the given token is invalid, authentication failed</response>
            <response code="501">If the integration is disabled for the provider</response>
            <response code="503">If there is no implementation for the requested provider</response>
        </member>
        <member name="M:TCDev.CloudStorage.Controllers.SitesController.GetSiteDrives(System.String,System.String)">
            <summary>
               Returns available drives for the specified site (Sharepoint only)
            </summary>
            <returns>
               <see cref="T:TCDev.CloudStorage.Model.ICloudStorageProviderSiteInfo" />
            </returns>
            <response code="200" cref="T:TCDev.CloudStorage.Model.ICloudStorageProviderSiteInfo">OK</response>
            <response code="401">If the given token is invalid, authentication failed</response>
            <response code="404">If nothing could be found for the siteId</response>
            <response code="501">If the integration is disabled for the provider</response>
            <response code="503">If there is no implementation for the requested provider</response>
        </member>
        <member name="T:TCDev.CloudStorage.Controllers.SystemController">
            <summary>
               Account Controller for CSP requests
            </summary>
        </member>
        <member name="M:TCDev.CloudStorage.Controllers.SystemController.Get">
            <summary>
               Returns a list of implemented providers, working functions for those and ad
            </summary>
            <returns>
               <see cref="T:TCDev.CloudStorage.Model.ICloudStorageProviderSystemState" />
            </returns>
            <response code="200" cref="T:TCDev.CloudStorage.Model.ICloudStorageProviderSystemState">OK</response>
        </member>
        <member name="T:TCDev.CloudStorage.Controllers.HealthController">
            <summary>
               Retrieve System Health Data
            </summary>
        </member>
        <member name="M:TCDev.CloudStorage.Controllers.HealthController.Get">
            <summary>
               Get information about system health, uptime and provider state
            </summary>
            <returns>
               <see cref="T:TCDev.CloudStorage.Model.CSWSystemState" />
            </returns>
            <response code="200" cref="T:TCDev.CloudStorage.Model.CSWSystemState">OK</response>
        </member>
        <member name="T:TCDev.CloudStorage.Extensions.ApplicationBuilderExtensions">
            <summary>
               Extension methods for <see cref="T:Microsoft.AspNetCore.Builder.IApplicationBuilder" /> to add a Bot to the ASP.NET Core request execution
               pipeline.
            </summary>
            <seealso cref="T:TCDev.CloudStorage.Extensions.ServiceCollectionExtensions" />
        </member>
        <member name="M:TCDev.CloudStorage.Extensions.ApplicationBuilderExtensions.UseDropbox(Microsoft.AspNetCore.Builder.IApplicationBuilder)">
            <summary>
               UseDropbox -> Enable Dropbox Service to be used by the Framework
            </summary>
            <param name="applicationBuilder"></param>
            <returns></returns>
        </member>
        <member name="M:TCDev.CloudStorage.Extensions.ApplicationBuilderExtensions.UseSharePoint(Microsoft.AspNetCore.Builder.IApplicationBuilder)">
            <summary>
               UseSharePoint -> Enable SharePoint Service to be used by the Framework
            </summary>
            <param name="applicationBuilder"></param>
            <returns></returns>
        </member>
        <member name="M:TCDev.CloudStorage.Extensions.ApplicationBuilderExtensions.UseOneDrive(Microsoft.AspNetCore.Builder.IApplicationBuilder)">
            <summary>
               UseOneDrive -> Enable OneDrive Service to be used by the Framework
            </summary>
            <param name="applicationBuilder"></param>
            <returns></returns>
        </member>
        <member name="T:TCDev.CloudStorage.Extensions.ProviderRegistry">
            <summary>
               Tools for provider handling
            </summary>
        </member>
        <member name="M:TCDev.CloudStorage.Extensions.ProviderRegistry.GetProviderByName(System.String)">
            <summary>
               Returns the type for the specific extension by using its name
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="T:TCDev.CloudStorage.Extensions.RequestExtension">
            <summary>
               Extend HTTPRequest with our own functions
            </summary>
        </member>
        <member name="M:TCDev.CloudStorage.Extensions.RequestExtension.GetData(Microsoft.AspNetCore.Http.HttpRequest)">
            <summary>
               Parse TWRequest Data from the Request
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:TCDev.CloudStorage.Extensions.RequestExtension.IsValid(Microsoft.AspNetCore.Http.HttpRequest)">
            <summary>
               Check if the request is valid
            </summary>
            <param name="request"></param>
        </member>
        <member name="M:TCDev.CloudStorage.Extensions.RequestExtension.GetProviderName(Microsoft.AspNetCore.Http.HttpRequest)">
            <summary>
               Return ProviderName for the request
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:TCDev.CloudStorage.Extensions.RequestExtension.GetExtraOptions(Microsoft.AspNetCore.Http.HttpRequest)">
            <summary>
               Parse extra query parameters in the request
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="T:TCDev.CloudStorage.Extensions.TWRequestData">
            <summary>
               Returns data specific to Teamwork Requests
            </summary>
        </member>
        <member name="P:TCDev.CloudStorage.Extensions.TWRequestData.Request">
            <summary>
               Type of Provider the call is for
            </summary>
        </member>
        <member name="M:TCDev.CloudStorage.Extensions.TWRequestData.#ctor(Microsoft.AspNetCore.Http.HttpRequest,System.Boolean)">
            <summary>
            </summary>
            <param name="request"></param>
            <param name="isValid"></param>
        </member>
        <member name="M:TCDev.CloudStorage.Extensions.TWRequestData.GetProvider">
            <summary>
               Get the Provider Instance the call is for
            </summary>
            <returns></returns>
        </member>
        <member name="M:TCDev.CloudStorage.Extensions.TWRequestData.GetProviderWithSites">
            <summary>
               Get the Provider Instance the call is for
            </summary>
            <returns></returns>
        </member>
        <member name="T:TCDev.CloudStorage.Extensions.ExtraOptions">
            <summary>
               Retreives extra options passed in the Teamwork Requests
            </summary>
        </member>
        <member name="T:TCDev.CloudStorage.Extensions.ServiceCollectionExtensions">
            <summary>
               Extension class for cloud storage providers.
            </summary>
            <seealso cref="T:TCDev.CloudStorage.Extensions.ApplicationBuilderExtensions" />
            <seealso cref="T:TCDev.CloudStorage.Model.ICloudStorageProvider" />
        </member>
        <member name="M:TCDev.CloudStorage.Extensions.ServiceCollectionExtensions.AddProvider``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{TCDev.CloudStorage.Model.ICloudStorageProviderOptions})">
            <summary>
               Adds and configures services for a <typeparamref name="TProviderType">specified provider type</typeparamref> to the
               <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.
            </summary>
            <typeparam name="TProviderType">
               A concrete type of
               <see cref="T:TCDev.CloudStorage.Model.ICloudStorageProvider"/> that is to be registered and exposed to the Bot Framework.
            </typeparam>
            <param name="services">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.</param>
            <param name="configureAction">A callback that can further be used to configure the bot.</param>
            <returns>A reference to this instance after the operation has completed.</returns>
        </member>
        <member name="M:TCDev.CloudStorage.Extensions.ServiceCollectionExtensions.AddProviderWithSites``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{TCDev.CloudStorage.Model.ICloudStorageProviderOptions})">
            <summary>
               Adds and configures services for a <typeparamref name="TProviderType">specified provider type</typeparamref> to the
               <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.
            </summary>
            <typeparam name="TProviderType">
               A concrete type of
               <see cref="T:TCDev.CloudStorage.Model.ICloudStorageProviderWithSites"/> that is to be registered and exposed to the Bot Framework.
            </typeparam>
            <param name="services">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.</param>
            <param name="configureAction">A callback that can further be used to configure the bot.</param>
            <returns>A reference to this instance after the operation has completed.</returns>
        </member>
        <member name="T:TCDev.CloudStorage.Middleware.AuthenticationMiddleware">
            <summary>
               Handles authentication to csp
            </summary>
        </member>
        <member name="M:TCDev.CloudStorage.Middleware.AuthenticationMiddleware.#ctor(Microsoft.AspNetCore.Http.RequestDelegate)">
            <summary>
               Base Constructor
            </summary>
        </member>
        <member name="M:TCDev.CloudStorage.Middleware.AuthenticationMiddleware.Invoke(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
               Main implementation for middleware
            </summary>
            <param name="httpContext"></param>
            <returns></returns>
        </member>
        <member name="T:TCDev.CloudStorage.Middleware.CSPProviderSelector">
            <summary>
               Handles authentication to csp
            </summary>
        </member>
        <member name="M:TCDev.CloudStorage.Middleware.CSPProviderSelector.#ctor(Microsoft.AspNetCore.Http.RequestDelegate)">
            <summary>
               Base Constructor
            </summary>
        </member>
        <member name="M:TCDev.CloudStorage.Middleware.CSPProviderSelector.Invoke(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
               Main implementation for middleware
            </summary>
            <param name="httpContext"></param>
            <returns></returns>
        </member>
        <member name="T:TCDev.CloudStorage.Middleware.RawRequestBodyFormatter">
            <summary>
               Formatter that allows content of type text/plain and application/octet stream
               or no content type to be parsed to raw data. Allows for a single input parameter
               in the form of:
               public string RawString([FromBody] string data)
               public byte[] RawData([FromBody] byte[] data)
            </summary>
        </member>
        <member name="M:TCDev.CloudStorage.Middleware.RawRequestBodyFormatter.CanRead(Microsoft.AspNetCore.Mvc.Formatters.InputFormatterContext)">
            <summary>
               Allow text/plain, application/octet-stream and no content type to
               be processed
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:TCDev.CloudStorage.Middleware.RawRequestBodyFormatter.ReadRequestBodyAsync(Microsoft.AspNetCore.Mvc.Formatters.InputFormatterContext)">
            <summary>
               Handle text/plain or no content type for string results
               Handle application/octet-stream for byte[] results
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:TCDev.CloudStorage.Middleware.ProviderDetectionServiceExtension">
            <summary>
               Extension for ProviderDetection Middleware
            </summary>
        </member>
        <member name="M:TCDev.CloudStorage.Middleware.ProviderDetectionServiceExtension.UseTeamworkProviderDetection(Microsoft.AspNetCore.Builder.IApplicationBuilder)">
            <summary>
               Enable Teamwork Provider Selector for CSP
            </summary>
            <param name="builder"></param>
            <returns></returns>
        </member>
        <member name="T:TCDev.CloudStorage.Middleware.ProviderDetectionService">
            <summary>
               Handles authentication to csp
            </summary>
        </member>
        <member name="M:TCDev.CloudStorage.Middleware.ProviderDetectionService.#ctor(Microsoft.AspNetCore.Http.RequestDelegate)">
            <summary>
               Base Constructor
            </summary>
        </member>
        <member name="M:TCDev.CloudStorage.Middleware.ProviderDetectionService.Invoke(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
               Main implementation for middleware
            </summary>
            <param name="httpContext"></param>
            <returns></returns>
        </member>
        <member name="T:TCDev.CloudStorage.Model.ICloudStorageProvider">
            <summary>
               Basic Interface listing all API Calls a CSP should provide
            </summary>
        </member>
        <member name="M:TCDev.CloudStorage.Model.ICloudStorageProvider.GetAccountInfoAsync(System.String,TCDev.CloudStorage.Extensions.ExtraOptions)">
            <summary>
               Returns account info
            </summary>
            <param name="accessToken"></param>
            <returns></returns>
        </member>
        <member name="M:TCDev.CloudStorage.Model.ICloudStorageProvider.GetDriveInfoAsync(System.String,System.String)">
            <summary>
               Returns account info
            </summary>
            <param name="accessToken"></param>
            <returns></returns>
        </member>
        <member name="M:TCDev.CloudStorage.Model.ICloudStorageProvider.GetAvailableDrivesAsync(System.String)">
            <summary>
               Returns account info
            </summary>
            <param name="accessToken"></param>
            <returns></returns>
        </member>
        <member name="M:TCDev.CloudStorage.Model.ICloudStorageProvider.GetFolderInfoAsync(System.String,System.String,TCDev.CloudStorage.Extensions.ExtraOptions)">
            <summary>
               Returns Folder Info
            </summary>
            <param name="accessToken"></param>
            <param name="folderId"></param>
            <returns></returns>
        </member>
        <member name="M:TCDev.CloudStorage.Model.ICloudStorageProvider.GetFolderContentsAsync(System.String,System.String,System.Boolean,System.Boolean,System.Boolean,TCDev.CloudStorage.Extensions.ExtraOptions)">
            <summary>
               Returns Folder contents
            </summary>
            <param name="accessToken"></param>
            <param name="folderId"></param>
            <param name="showFiles"></param>
            <param name="includeMounted"></param>
            <param name="includeMedia"></param>
            <returns></returns>
        </member>
        <member name="M:TCDev.CloudStorage.Model.ICloudStorageProvider.GetFolderContentsByPathAsync(System.String,System.String,System.Boolean,System.Boolean,System.Boolean,TCDev.CloudStorage.Extensions.ExtraOptions)">
            <summary>
               Returns Folder contents
            </summary>
            <param name="accessToken"></param>
            <param name="path"></param>
            <param name="showFiles"></param>
            <param name="includeMounted"></param>
            <param name="includeMedia"></param>
            <returns></returns>
        </member>
        <member name="M:TCDev.CloudStorage.Model.ICloudStorageProvider.GetFolderContentsSearchAsync(System.String,System.String,System.Boolean,System.Boolean,System.Boolean,System.String,System.Boolean,TCDev.CloudStorage.Extensions.ExtraOptions)">
            <summary>
               Returns Folder contents by searching
            </summary>
            <param name="accessToken"></param>
            <param name="folderId"></param>
            <param name="showFiles"></param>
            <param name="searchFor"></param>
            <returns></returns>
        </member>
        <member name="M:TCDev.CloudStorage.Model.ICloudStorageProvider.GetFileInfoAsync(System.String,System.String,TCDev.CloudStorage.Extensions.ExtraOptions)">
            <summary>
               Returns file details
            </summary>
            <param name="accessToken"></param>
            <param name="fileId"></param>
            <returns></returns>
        </member>
        <member name="M:TCDev.CloudStorage.Model.ICloudStorageProvider.GetFileThumbnailAsync(System.String,System.String,System.String,TCDev.CloudStorage.Extensions.ExtraOptions)">
            <summary>
               Returns file details
            </summary>
            <param name="accessToken"></param>
            <param name="fileId"></param>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:TCDev.CloudStorage.Model.ICloudStorageProvider.PostFile(System.String,System.String,Microsoft.AspNetCore.Http.IFormFile,TCDev.CloudStorage.Extensions.ExtraOptions)">
            <summary>
               Upload new file to a folder
            </summary>
            <param name="accessToken"></param>
            <param name="folderId"></param>
            <param name="file"></param>
            <returns></returns>
        </member>
        <member name="M:TCDev.CloudStorage.Model.ICloudStorageProvider.PutFile(System.String,System.String,Microsoft.AspNetCore.Http.IFormFile,TCDev.CloudStorage.Extensions.ExtraOptions)">
            <summary>
               Update file content
            </summary>
            <param name="accessToken"></param>
            <param name="fileId"></param>
            <param name="file"></param>
            <returns></returns>
        </member>
        <member name="M:TCDev.CloudStorage.Model.ICloudStorageProvider.DeleteFile(System.String,System.String,TCDev.CloudStorage.Extensions.ExtraOptions)">
            <summary>
               Delete a file
            </summary>
            <param name="accessToken"></param>
            <param name="fileId"></param>
            <returns></returns>
        </member>
        <member name="M:TCDev.CloudStorage.Model.ICloudStorageProvider.CreateFolder(System.String,System.String,System.String,TCDev.CloudStorage.Extensions.ExtraOptions)">
            <summary>
               CreateFolder
            </summary>
            <param name="accessToken"></param>
            <param name="folderId"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:TCDev.CloudStorage.Model.ICloudStorageProvider.CopyItem(System.String,System.String,System.String,TCDev.CloudStorage.Extensions.ExtraOptions)">
            <summary>
               CopyItem
            </summary>
            <param name="accessToken"></param>
            <param name="itemId"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:TCDev.CloudStorage.Model.ICloudStorageProvider.CreateLink(System.String,System.String,System.String,System.String,TCDev.CloudStorage.Extensions.ExtraOptions)">
            <summary>
               CopyItem
            </summary>
            <param name="accessToken"></param>
            <param name="itemId"></param>
            <param name="linkType"></param>
            <param name="linkScope"></param>
            <returns></returns>
        </member>
        <member name="T:TCDev.CloudStorage.Model.ICloudStorageProviderWithSites">
            <summary>
               Basic Interface listing all API Calls a CSP with sites should provide
            </summary>
        </member>
        <member name="M:TCDev.CloudStorage.Model.ICloudStorageProviderWithSites.GetSitesAsync(System.String,TCDev.CloudStorage.Extensions.ExtraOptions)">
            <summary>
               Returns all sites
            </summary>
            <param name="accessToken"></param>
            <param name="extraOptions"></param>
            <returns></returns>
        </member>
        <member name="M:TCDev.CloudStorage.Model.ICloudStorageProviderWithSites.GetSitesSearchAsync(System.String,System.String,TCDev.CloudStorage.Extensions.ExtraOptions)">
            <summary>
               Returns sites matching search criteria
            </summary>
            <param name="accessToken"></param>
            <param name="searchFor"></param>
            <param name="extraOptions"></param>
            <returns></returns>
        </member>
        <member name="M:TCDev.CloudStorage.Model.ICloudStorageProviderWithSites.GetSiteInfoAsync(System.String,System.String,TCDev.CloudStorage.Extensions.ExtraOptions)">
            <summary>
               Returns site info
            </summary>
            <param name="accessToken"></param>
            <param name="siteId"></param>
            <param name="extraOptions"></param>
            <returns></returns>
        </member>
        <member name="M:TCDev.CloudStorage.Model.ICloudStorageProviderWithSites.GetDrivesAsync(System.String,System.String,TCDev.CloudStorage.Extensions.ExtraOptions)">
            <summary>
               Returns drives for specified site
            </summary>
            <param name="accessToken"></param>
            <param name="siteId"></param>
            <param name="extraOptions"></param>
            <returns></returns>
        </member>
        <member name="M:TCDev.CloudStorage.Model.ICloudStorageProviderWithSites.GetDriveInfoAsync(System.String,System.String,TCDev.CloudStorage.Extensions.ExtraOptions)">
            <summary>
               Returns drive info
            </summary>
            <param name="accessToken"></param>
            <param name="driveId"></param>
            <param name="extraOptions"></param>
            <returns></returns>
        </member>
        <member name="T:TCDev.CloudStorage.Startup">
            <summary>
               Main Startup implementation
            </summary>
        </member>
        <member name="P:TCDev.CloudStorage.Startup.Configuration">
            <summary>
               Holds the configuration implementation
            </summary>
        </member>
        <member name="M:TCDev.CloudStorage.Startup.#ctor(Microsoft.AspNetCore.Hosting.IHostingEnvironment)">
            <summary>
               Startup class to handle app startup
            </summary>
            <param name="configuration"></param>
        </member>
        <member name="M:TCDev.CloudStorage.Startup.ConfigureServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            This method gets called by the runtime. Use this method to add services to the container.
        </member>
        <member name="M:TCDev.CloudStorage.Startup.Configure(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Hosting.IWebHostEnvironment)">
            This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
        </member>
        <member name="M:TCDev.CloudStorage.StartupExtension.SwaggerSetup.SetupSwagger(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
               Add and configure swagger services
            </summary>
            <param name="services"></param>
            <returns></returns>
        </member>
    </members>
</doc>
